plot(final_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
names(final_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(final_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
final_data
final_data = data.frame(t(feat_vec) %*% mat) # ?matmult for details
feat_vec
mat
dim(mat)
?matmult
feat_vec = t(eigens$vectors)
pca_data = data.frame(t(feat_vec) %*% mat) # ?matmult for details
dim(t(feat_vec))
pca_data = data.frame(t(feat_vec) %*% t(mat)) # ?matmult for details
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
pca_data
pca_data = data.frame(t(feat_vec) %*% t(mat)) # ?matmult for details
pca_data
feat_vec = eigens$vectors
feat_vec
pca_data = data.frame(feat_vec %*% t(mat)) # ?matmult for details
pca_data
pca_data = data.frame(t(feat_vec %*% t(mat))) # ?matmult for details
pca_data
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
feat_vec = t(eigens$vectors)
row_data_adj = t(mat)
pca_data = data.frame(t(feat_vec %*% row_data_adj)) # ?matmult for details
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
feat_vec = t(eigens$vectors)
pca_data = data.frame(t(feat_vec %*% t(mat))) # ?matmult for details
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
feat_vec = t(eigens$vectors)
pca_data = data.frame(t(feat_vec %*% t(mat))) # ?matmult for details
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
feat_vec = eigens$vectors
pca_data = data.frame(t(feat_vec %*% t(mat))) # ?matmult for details
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
feat_vec = t(eigens$vectors)
pca_data = data.frame(t(feat_vec %*% t(mat))) # ?matmult for details
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
eigens
plot(pca_data$PCA3, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
plot(pca_data$PCA3, final_data$PCA4, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
plot(pca_data$PCA1, final_data$PCA4, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
mat
t(mat)
my_mat <- as.matrix(mat)
(1/149) * t(my_mat) %*% my_mat
cov_mat
my_mat <- as.matrix(mat)
(1/nrow(mat)-1) * t(my_mat) %*% my_mat
(1/(nrow(mat)-1)) * t(my_mat) %*% my_mat
cov_mat
###############################
# Principal Components Analysis
# Author: Martin Lumiste
# June 9, 2017
###############################
data(iris)
pc_real <- prcomp(iris[,1:4])$x
colmeans <- colMeans(iris[,1:4])
# Data matrix
mat <- iris[,1:4]
# Deameaning
for (i in names(mat)) mat[[i]] <- mat[[i]] - colmeans[i]
# Covariance matrix calculation
my_mat <- as.matrix(mat)
cov_mat <- (1/(nrow(mat)-1)) * t(my_mat) %*% my_mat
# Eigenvalues of covariance matrix
eigens <- eigen(cov_mat)
feat_vec = t(eigens$vectors)
#row_data_adj = t(mat)
# PCA construction
pca_data = data.frame(t(feat_vec %*% t(mat))) # ?matmult for details
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
PCA1
pca_data
iris
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16, col=iris$Species)
plot(pca_data$PCA1, final_data$PCA3, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16, col=iris$Species)
plot(pca_data$PCA1, final_data$PCA4, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16, col=iris$Species)
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16, col=iris$Species)
feat_vec
dim(feat_vec)
feat_vec = eigens$vectors
pca_data = data.frame(t(feat_vec %*% t(mat))) # ?matmult for details
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16, col=iris$Species)
feat_vec = t(eigens$vectors)
pca_data = data.frame(t(feat_vec %*% t(mat))) # ?matmult for details
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16, col=iris$Species)
feat_vec = eigens$vectors
pca_data = data.frame(t(feat_vec %*% t(mat))) # ?matmult for details
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16, col=iris$Species)
feat_vec = t(eigens$vectors)
pca_data = data.frame(t(feat_vec %*% t(mat))) # ?matmult for details
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16, col=iris$Species)
feat_vec
pca_data = data.frame(mat %*% t(feat_vec))
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
dim(feat_vec)
dim(mat)
pca_data = data.frame(mat %*% feat_vec)
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
mat
dim(mat)
dim(feat_vec)
mat %*% feat_vec
as.matrix(mat) %*% feat_vec
pca_data = data.frame(my_mat %*% feat_vec)
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16, col=iris$Species)
feat_vec = eigens$vectors
pca_data = data.frame(my_mat %*% feat_vec)
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16, col=iris$Species)
eigens <- eigen(cov_mat)$vectors
pca_data = data.frame(my_mat %*% eigens)
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16, col=iris$Species)
data(austres)
plot(austres, type="l")
(169.3 - 152) + (182.95 - 176) + (93.5 - 104)
((169.3 - 152) + (182.95 - 176) + (93.5 - 104)) / 8
((169.3 - 152) + (182.95 - 176) + (93.5 - 104) + 14) / 8
Sys.time)
Sys.time()
hour(Sys.time())
data <- tail(read.table("../DB_XML.csv",sep=","),1)
setwd("to_commit")
data <- tail(read.table("../DB_XML.csv",sep=","),1)
getwd()
setwd("C:/Users/martin/Desktop/Weather")
data <- tail(read.table("../DB_XML.csv",sep=","),1)
data()
data
data <- tail(read.table("../DB_XML.csv",sep=","),1)
getwd()
setwd("to_commit")
data <- tail(read.table("../DB_XML.csv",sep=","),1)
data
colnames <- c("timestamp","sys_time","name","wmocode","lon","lat","phenomenon","visibility","precipitations","airpressure",
"relativehumidity","airtemperature","winddirection","windspeed","windspeedmax")
names(data) <- colnames
data
data$sys_time
data_forecast <- read.table("../DB_FYRXML.csv",sep=",")
data_forecast
library(lubridate)
data
data$sys_time
hour(data$sys_time)
as.POSIXct(data$sys_time, format ="%Y-%m-%dT%H")
strftime(data$sys_time, format ="%Y-%m-%dT%H")
strftime(data$sys_time, format ="%Y-%m-%d %H")
data$sys_time
strptime(data$sys_time, format ="%Y-%m-%d %H")
library(XML)
library(lubridate)
time_cache <- as.character(tail(read.table("DB_FYRXML.csv",sep=","),1)[,1])
while (1 < 2) {
print(paste("Looking for updates, time:",Sys.time()))
xml.url <- "http://www.yr.no/place/Estonia/Harjumaa/Tallinn/forecast_hour_by_hour.xml"
xmlfile <- xmlTreeParse(xml.url, useInternalNodes = T)
tln <- xpathApply(xmlfile,"//time")
forecast_time <- xpathApply(tln[[1]],"//lastupdate")
forecast_time <- sapply(forecast_time,xmlValue)
forecast_time <- as.POSIXct(forecast_time,format="%Y-%m-%dT%H:%M:%S")
forecast_time <- strptime(data$sys_time, format ="%Y-%m-%d %H")
if (as.character(forecast_time) != time_cache){
print("Updates found!")
temp <- xpathApply(tln[[1]],"//temperature")
wind <- xpathApply(tln[[1]],"//windSpeed")
wind_dir <- xpathApply(tln[[1]],"//windDirection")
pressure <- xpathApply(tln[[1]],"//pressure")
time <- xpathApply(tln[[1]],"//time")
temp <- sapply(temp,xmlGetAttr,"value")
wind <- sapply(wind, xmlGetAttr, "mps")
wind_dir <- sapply(wind_dir, xmlGetAttr, "deg")
pressure <- sapply(pressure, xmlGetAttr, "value")
time <- sapply(time,xmlGetAttr,"from")
time <- as.POSIXct(time,format="%Y-%m-%dT%H:%M:%S")
df <- data.frame(forecast_time = forecast_time, time = time, temp = temp, wind = wind, wind_dir = wind_dir, pressure = pressure)
write.table(df, "DB_FYRXML.csv", row.names=F, append=T, sep=",")
#write.table(df, "DB_FYRXML.csv", row.names=F, col.names=F, append=T, sep=",")
print("Saved updates to database")
time_cache <- forecast_time
}
Sys.sleep(600)
}
getwd()
setwd("../")
getwd()
library(XML)
library(lubridate)
time_cache <- as.character(tail(read.table("DB_FYRXML.csv",sep=","),1)[,1])
while (1 < 2) {
print(paste("Looking for updates, time:",Sys.time()))
xml.url <- "http://www.yr.no/place/Estonia/Harjumaa/Tallinn/forecast_hour_by_hour.xml"
xmlfile <- xmlTreeParse(xml.url, useInternalNodes = T)
tln <- xpathApply(xmlfile,"//time")
forecast_time <- xpathApply(tln[[1]],"//lastupdate")
forecast_time <- sapply(forecast_time,xmlValue)
forecast_time <- as.POSIXct(forecast_time,format="%Y-%m-%dT%H:%M:%S")
forecast_time <- strptime(data$sys_time, format ="%Y-%m-%d %H")
if (as.character(forecast_time) != time_cache){
print("Updates found!")
temp <- xpathApply(tln[[1]],"//temperature")
wind <- xpathApply(tln[[1]],"//windSpeed")
wind_dir <- xpathApply(tln[[1]],"//windDirection")
pressure <- xpathApply(tln[[1]],"//pressure")
time <- xpathApply(tln[[1]],"//time")
temp <- sapply(temp,xmlGetAttr,"value")
wind <- sapply(wind, xmlGetAttr, "mps")
wind_dir <- sapply(wind_dir, xmlGetAttr, "deg")
pressure <- sapply(pressure, xmlGetAttr, "value")
time <- sapply(time,xmlGetAttr,"from")
time <- as.POSIXct(time,format="%Y-%m-%dT%H:%M:%S")
df <- data.frame(forecast_time = forecast_time, time = time, temp = temp, wind = wind, wind_dir = wind_dir, pressure = pressure)
write.table(df, "DB_FYRXML.csv", row.names=F, append=T, sep=",")
#write.table(df, "DB_FYRXML.csv", row.names=F, col.names=F, append=T, sep=",")
print("Saved updates to database")
time_cache <- forecast_time
}
Sys.sleep(600)
}
time_cache <- Sys.time()
print(paste("Looking for updates, time:",Sys.time()))
xml.url <- "http://www.yr.no/place/Estonia/Harjumaa/Tallinn/forecast_hour_by_hour.xml"
xmlfile <- xmlTreeParse(xml.url, useInternalNodes = T)
tln <- xpathApply(xmlfile,"//time")
forecast_time <- xpathApply(tln[[1]],"//lastupdate")
forecast_time <- sapply(forecast_time,xmlValue)
forecast_time <- as.POSIXct(forecast_time,format="%Y-%m-%dT%H:%M:%S")
forecast_time <- strptime(data$sys_time, format ="%Y-%m-%d %H")
print("Updates found!")
temp <- xpathApply(tln[[1]],"//temperature")
wind <- xpathApply(tln[[1]],"//windSpeed")
wind_dir <- xpathApply(tln[[1]],"//windDirection")
pressure <- xpathApply(tln[[1]],"//pressure")
time <- xpathApply(tln[[1]],"//time")
temp <- sapply(temp,xmlGetAttr,"value")
wind <- sapply(wind, xmlGetAttr, "mps")
wind_dir <- sapply(wind_dir, xmlGetAttr, "deg")
pressure <- sapply(pressure, xmlGetAttr, "value")
time <- sapply(time,xmlGetAttr,"from")
time <- as.POSIXct(time,format="%Y-%m-%dT%H:%M:%S")
df <- data.frame(forecast_time = forecast_time, time = time, temp = temp, wind = wind, wind_dir = wind_dir, pressure = pressure)
df
time_cache <- "2017-03-30 10:00:00"
print(paste("Looking for updates, time:",Sys.time()))
xml.url <- "http://www.yr.no/place/Estonia/Harjumaa/Tallinn/forecast_hour_by_hour.xml"
xmlfile <- xmlTreeParse(xml.url, useInternalNodes = T)
tln <- xpathApply(xmlfile,"//time")
forecast_time <- xpathApply(tln[[1]],"//lastupdate")
forecast_time <- sapply(forecast_time,xmlValue)
forecast_time <- as.POSIXct(forecast_time,format="%Y-%m-%dT%H:%M:%S")
forecast_time <- strptime(data$sys_time, format ="%Y-%m-%d %H")
print("Updates found!")
temp <- xpathApply(tln[[1]],"//temperature")
wind <- xpathApply(tln[[1]],"//windSpeed")
wind_dir <- xpathApply(tln[[1]],"//windDirection")
pressure <- xpathApply(tln[[1]],"//pressure")
time <- xpathApply(tln[[1]],"//time")
temp <- sapply(temp,xmlGetAttr,"value")
wind <- sapply(wind, xmlGetAttr, "mps")
wind_dir <- sapply(wind_dir, xmlGetAttr, "deg")
pressure <- sapply(pressure, xmlGetAttr, "value")
time <- sapply(time,xmlGetAttr,"from")
time <- as.POSIXct(time,format="%Y-%m-%dT%H:%M:%S")
df <- data.frame(forecast_time = forecast_time, time = time, temp = temp, wind = wind, wind_dir = wind_dir, pressure = pressure)
df
tln
forecast_time
print(paste("Looking for updates, time:",Sys.time()))
xml.url <- "http://www.yr.no/place/Estonia/Harjumaa/Tallinn/forecast_hour_by_hour.xml"
xmlfile <- xmlTreeParse(xml.url, useInternalNodes = T)
tln <- xpathApply(xmlfile,"//time")
forecast_time <- xpathApply(tln[[1]],"//lastupdate")
forecast_time <- sapply(forecast_time,xmlValue)
forecast_time <- as.POSIXct(forecast_time,format="%Y-%m-%dT%H:%M:%S")
forecast_time <- strptime(forecast_time, format ="%Y-%m-%d %H")
print("Updates found!")
temp <- xpathApply(tln[[1]],"//temperature")
wind <- xpathApply(tln[[1]],"//windSpeed")
wind_dir <- xpathApply(tln[[1]],"//windDirection")
pressure <- xpathApply(tln[[1]],"//pressure")
time <- xpathApply(tln[[1]],"//time")
temp <- sapply(temp,xmlGetAttr,"value")
wind <- sapply(wind, xmlGetAttr, "mps")
wind_dir <- sapply(wind_dir, xmlGetAttr, "deg")
pressure <- sapply(pressure, xmlGetAttr, "value")
time <- sapply(time,xmlGetAttr,"from")
time <- as.POSIXct(time,format="%Y-%m-%dT%H:%M:%S")
df <- data.frame(forecast_time = forecast_time, time = time, temp = temp, wind = wind, wind_dir = wind_dir, pressure = pressure)
df
write.table(df, "DB_FYRXML.csv", row.names=F, append=T, sep=",")
time_cache
print(paste("Checking for new forecasts -", Sys.time()))
forecast <- read.table("DB_FYRXML.csv",sep=",",header=TRUE)
forecast
forecast$time <- as.POSIXct(forecast$time)
forecast <- forecast[forecast$time < Sys.time() - 3600 & forecast$time > time_cache,]
forecast
getwd()
setwd("to_commit")
data_forecast <- read.table("../DB_FYRXML.csv",sep=",",header=TRUE)
data_forecast
data_forecast$time
data_forecast$time == today()
today()
data_forecast$time < today() + 1
today() + 1
as.Date(data_forecast$time) == today()
data_forecast[as.Date(data_forecast$time) == today()]
data_forecast
as.Date(data_forecast$time) == today()
data_forecast[as.Date(data_forecast$time) == today()]
data_forecast[as.Date(data_forecast$time) == today(),]
data_forecat$time
data_forecast$time
data_forecast$time < Sys.time() + 3600*10
str(data_forecast)
data_forecast <- read.table("../DB_FYRXML.csv",sep=",",header=TRUE)
data_forecast$time <- as.POSIXct(data_forecast$time)
str(data_forecast)
data_forecast$time < Sys.time() + 3600*10
data_forecast[data_forecast$time < Sys.time() + 3600*12,]
data_forecast <- data_forecast[data_forecast$time < Sys.time() + 3600*12,]
data_forecast[1,]
as.character(data_forecast[1,])
paste(data_forecast[1,])
cat(data_forecast[1,])
print(data_forecast[1,])
data_forecast <- read.table("../DB_FYRXML.csv",sep=",",header=TRUE)
data_forecast$time <- as.POSIXct(data_forecast$time)
data_forecast <- data_forecast[data_forecast$time < Sys.time() + 3600*12,]
line <- paste("\n Today's forecast from Yr.no is: \n")
for (i in 1:nrow(data_forecast)){
new_line <- data_forecast[i,]
line <- c(line,new_line)
}
line
data_forecast <- read.table("../DB_FYRXML.csv",sep=",",header=TRUE)
data_forecast$time <- as.POSIXct(data_forecast$time)
data_forecast <- data_forecast[data_forecast$time < Sys.time() + 3600*12,]
line <- paste("\n Today's forecast from Yr.no is: \n")
for (i in 1:nrow(data_forecast)){
new_line <- unlist(data_forecast[i,])
line <- c(line,new_line)
}
line
data_forecast <- read.table("../DB_FYRXML.csv",sep=",",header=TRUE)
data_forecast$time <- as.POSIXct(data_forecast$time)
data_forecast <- data_forecast[data_forecast$time < Sys.time() + 3600*12,]
line <- paste("\n Today's forecast from Yr.no is: \n")
for (i in 1:nrow(data_forecast)){
new_line <- unlist(data_forecast[i,])
line <- paste(line,new_line)
}
line
data_forecast
library(rjson)
toJSON(data_forecast)
data_forecast
paste(data_forecast
paste(data_forecast)
unlist(data_forecast)
library(dplyr)
kable(data_forecast)
library(knitr)
kable(data_forecast)
str(kable(data_forecast))
wat <- kable(data_forecast)
write(wat,file="wat.MD")
getwd()
line
line <- paste("\n Today's forecast from Yr.no is: \n")
line
c(line,wat)
data
data <- tail(read.table("../DB_XML.csv",sep=","),1)
names(data) <- colnames
data
forecast <- read.table("DB_FYRXML.csv",sep=",",header=TRUE)
forecast$time <- as.POSIXct(forecast$time)
getwd()
setwd("../")
print(paste("Checking for new forecasts -", Sys.time()))
forecast <- read.table("DB_FYRXML.csv",sep=",",header=TRUE)
forecast$time <- as.POSIXct(forecast$time)
forecast
time_cache
forecast <- forecast[forecast$time < Sys.time() - 3600 & forecast$time > time_cache,]
forecast
print(paste("Checking for new forecasts -", Sys.time()))
forecast <- read.table("DB_FYRXML.csv",sep=",",header=TRUE)
forecast$time <- as.POSIXct(forecast$time)
forecast <- forecast[forecast$time < Sys.time() - 3600 & forecast$time > time_cache,]
time_cache <- Sys.time() - 3600*5
time_cache
print(paste("Checking for new forecasts -", Sys.time()))
forecast <- read.table("DB_FYRXML.csv",sep=",",header=TRUE)
forecast$time <- as.POSIXct(forecast$time)
forecast <- forecast[forecast$time < Sys.time() - 3600 & forecast$time > time_cache,]
forecast
data_forecast <- read.table("../DB_FYRXML.csv",sep=",",header=TRUE)
setwd("to_commit")
data_forecast <- read.table("../DB_FYRXML.csv",sep=",",header=TRUE)
data_forecast$time <- as.POSIXct(data_forecast$time)
data_forecast <- data_forecast[data_forecast$time < Sys.time() + 3600*12,]
data_forecast <- data.frame(data_forecast,error=NA)
data_forecast
data_forecast <- read.table("../DB_FYRXML.csv",sep=",",header=TRUE)
data_forecast$time <- as.POSIXct(data_forecast$time)
data
library(lubridate)
today()
data_forecast <- read.table("../DB_FYRXML.csv",sep=",",header=TRUE)
data_forecast$time <- as.POSIXct(data_forecast$time)
data_forecast <- data_forecast[as.Date(data_forecast$time) == today(),]
data_forecast <- data.frame(data_forecast,error_temp=NA)
data_forecast
data_forecast <- read.table("../DB_FYRXML.csv",sep=",",header=TRUE)
data_forecast
data_forecast$time <- as.POSIXct(data_forecast$time)
data_forecast <- data_forecast[as.Date(data_forecast$time) == today(),]
data_forecast
today()
?today
as.Date(data_forecast$time)
data_forecast <- read.table("../DB_FYRXML.csv",sep=",",header=TRUE)
data_forecast$time <- as.POSIXct(data_forecast$time)
as.Date(data_forecast$time)
data_forecast
as.Date(data_forecast$time,tz="EEST")
as.Date(data_forecast$time,tz="Tallinn")
as.Date(data_forecast$time,tz="Estonia")
as.Date(data_forecast$time,tz="GMT")
as.Date(data_forecast$time,tz="GMT+2")
as.Date(data_forecast$time,tz="EET")
data_forecast$time
data_forecast
data_forecast <- read.table("../DB_FYRXML.csv",sep=",",header=TRUE)
data_forecast$time <- as.POSIXct(data_forecast$time)
data_forecast <- data_forecast[as.Date(data_forecast$time,tz="EET") == today(),]
data_forecast <- data.frame(data_forecast,error_temp=NA)
data_forecast
data_forecast
errors <- read.table("DB_EXML.csv",sep=",",header=TRUE)
errors <- read.table("../DB_EXML.csv",sep=",",header=TRUE)
errors
errors <- errors[as.Date(errors$time,tz="EET") == today(),]
errors
errors <- errors[as.Date(errors$time,tz="EET") == today(),error_temp]
errors <- errors[as.Date(errors$time,tz="EET") == today(),7]
errors
errors <- errors[as.Date(errors$time,tz="EET") == today(),"error_temp"]
errors <- read.table("../DB_EXML.csv",sep=",",header=TRUE)
errors <- errors[as.Date(errors$time,tz="EET") == today(),"error_temp"]
errors
errors <- errors[as.Date(errors$time,tz="EET") == today(),]
errors <- read.table("../DB_EXML.csv",sep=",",header=TRUE)
errors <- errors[as.Date(errors$time,tz="EET") == today(),]
errors
errors[,5:ncol(errors)]
errors[,6:ncol(errors)]
errors[,7]
errors[,c(2,7)]
errors[,c(2,7)]
wat <- errors[,c(2,7)]
wat
errors
data_forecast
merge(data_forecast,wat,by="time")
errors <- read.table("../DB_EXML.csv",sep=",",header=TRUE)
errors <- errors[as.Date(errors$time,tz="EET") == today(),c(2,7)]
errors
data_forecast$time == errors$time
str(data_forecast)
errors <- read.table("../DB_EXML.csv",sep=",",header=TRUE)
errors$time <- as.POSIXct(errors$time)
errors <- errors[as.Date(errors$time,tz="EET") == today(),c(2,7)]
data_forecast$time == errors$time
data_forecast[data_forecast$time == errors$time,]
errors[1,"time"]
data_forecast[data_forecast$time == errors[i,time]]
data_forecast[data_forecast$time == errors[i,time],]
data_forecast$time
errors[i,time]
i <- 1
errors[i,time]
data_forecast[data_forecast$time == errors[i,"time"],]
data_forecast[data_forecast$time == errors[i,"time"],error_temp]
data_forecast[data_forecast$time == errors[i,"time"],"error_temp"]
data_forecast[data_forecast$time == errors[i,"time"],"error_temp"] <- errors[i,"temp"]
errors[i,"temp"]
errors
data_forecast[data_forecast$time == errors[i,"time"],"error_temp"] <- errors[i,"error_temp"]
data_forecast
