plot_weights(weights_blog[2,])
plot_weights(weights_blog[3,])
plot_weights(weights_blog[4,])
plot_weights(weights_blog[5,])
par(mfrow=c(3,3))
for (i in 1:6){
plot_weights(weights_blog[i,])
}
plot_weights(weights_blog[5,])
plot_weights(weights_blog[4,])
par(mfrow=c(3,3))
plot_weights(weights_blog[4,])
plot_weights(weights_blog[3,])
par(mfrow=c(2,2))
plot_weights(weights_blog[3,])
p1 <- plot_weights(weights_blog[1,])
p2 <- plot_weights(weights_blog[2,])
p3 <- plot_weights(weights_blog[3,])
p4 <- plot_weights(weights_blog[4,])
multiplot(p1,p2,p3,p4)
plot_weights(weights_blog[3,])
library(ggplot2)
multiplot(p1,p2,p3,p4)
?multiplot
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(p1,p2,p3,p4)
multiplot(p1,p2,p3,p4,ncol=2)
multiplot(p1,p2,p3,p4,cols=2)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
plot_weights <- function(weight_vec){
# Need to rotate the images by 90CW - we can do it by a combination of transpose and rev
wot <- unlist(apply(t(matrix(weight_vec,nrow=28)),2,rev))
colnames(wot) <- 1:28
rownames(wot) <- 1:28
df <- melt(wot)
ggplot(df, aes(x=Var2, y=Var1, fill=value)) + geom_tile() +
coord_equal() + scale_fill_continuous(low="black", high= "white") + labs(x=NULL, y=NULL) +
guides(fill=FALSE)
}
multiplot(p1,p2,p3,p4)
plot_weights(weights_blog[4,])
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col) + guides(fill=FALSE))
}
}
}
multiplot(p1,p2,p3,p4)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(p1,p2,p3,p4)
p1 <- plot_weights(weights_blog[1,])
p2 <- plot_weights(weights_blog[2,])
p3 <- plot_weights(weights_blog[3,])
p4 <- plot_weights(weights_blog[4,])
multiplot(p1,p2,p3,p4)
plot_weights <- function(weight_vec){
# Need to rotate the images by 90CW - we can do it by a combination of transpose and rev
wot <- unlist(apply(t(matrix(weight_vec,nrow=28)),2,rev))
colnames(wot) <- 1:28
rownames(wot) <- 1:28
df <- melt(wot)
ggplot(df, aes(x=Var2, y=Var1, fill=value)) + geom_tile() +
coord_equal() + scale_fill_continuous(low="black", high= "white") + labs(x=NULL, y=NULL) +
guides(fill=FALSE) + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
}
p1 <- plot_weights(weights_blog[1,])
p2 <- plot_weights(weights_blog[2,])
p3 <- plot_weights(weights_blog[3,])
p4 <- plot_weights(weights_blog[4,])
multiplot(p1,p2,p3,p4,col=3)
plot_weights <- function(weight_vec){
# Need to rotate the images by 90CW - we can do it by a combination of transpose and rev
wot <- unlist(apply(t(matrix(weight_vec,nrow=28)),2,rev))
colnames(wot) <- 1:28
rownames(wot) <- 1:28
df <- melt(wot)
ggplot(df, aes(x=Var2, y=Var1, fill=value)) + geom_tile() +
coord_equal() + scale_fill_continuous(low="black", high= "white") + labs(x=NULL, y=NULL) +
guides(fill=FALSE) + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
}
p1 <- plot_weights(weights_blog[1,])
p2 <- plot_weights(weights_blog[2,])
p3 <- plot_weights(weights_blog[3,])
p4 <- plot_weights(weights_blog[4,])
multiplot(p1,p2,p3,p4,col=3)
p1 <- plot_weights(weights_blog[1,])
p2 <- plot_weights(weights_blog[2,])
p3 <- plot_weights(weights_blog[3,])
p4 <- plot_weights(weights_blog[4,])
multiplot(p1,p2,p3,p4,col=3)
multiplot(p1,p2,p3,p4,col=2)
multiplot(p1,p2,p3,p4,cols=2)
big_plot <- function(weight_object){
p1 <- plot_weights(weights_object[1,])
p2 <- plot_weights(weights_object[2,])
p3 <- plot_weights(weights_object[3,])
p4 <- plot_weights(weights_object[4,])
p5 <- plot_weights(weights_object[5,])
p6 <- plot_weights(weights_object[6,])
p7 <- plot_weights(weights_object[7,])
p8 <- plot_weights(weights_object[8,])
p9 <- plot_weights(weights_object[9,])
p10 <- plot_weights(weights_object[10,])
p11 <- plot_weights(weights_object[11,])
p12 <- plot_weights(weights_object[12,])
multiplot(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,cols=3)
}
big_lot(weights_blog)
big_plot(weights_blog)
big_plot <- function(weights_object){
p1 <- plot_weights(weights_object[1,])
p2 <- plot_weights(weights_object[2,])
p3 <- plot_weights(weights_object[3,])
p4 <- plot_weights(weights_object[4,])
p5 <- plot_weights(weights_object[5,])
p6 <- plot_weights(weights_object[6,])
p7 <- plot_weights(weights_object[7,])
p8 <- plot_weights(weights_object[8,])
p9 <- plot_weights(weights_object[9,])
p10 <- plot_weights(weights_object[10,])
p11 <- plot_weights(weights_object[11,])
p12 <- plot_weights(weights_object[12,])
multiplot(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,cols=3)
}
big_plot(weights_blog)
big_plot(weights_own)
big_plot(weights_deepnet)
big_plot(weights_own)
dim(weights_own)
rbm_daydream(500,weights_own)
plot_weights(rbm_daydream(500,weights_own)[500,])
plot_weights(rbm_daydream(500,weights_own)[500,])
p1 <- plot_weights(rbm_daydream(500,weights_own)[500,])
plot_samples <- function(W){
p1 <- plot_weights(rbm_daydream(500,weights_own)[500,])
p2 <- plot_weights(rbm_daydream(500,weights_own)[500,])
p3 <- plot_weights(rbm_daydream(500,weights_own)[500,])
p4 <- plot_weights(rbm_daydream(500,weights_own)[500,])
p5 <- plot_weights(rbm_daydream(500,weights_own)[500,])
p6 <- plot_weights(rbm_daydream(500,weights_own)[500,])
p7 <- plot_weights(rbm_daydream(500,weights_own)[500,])
p8 <- plot_weights(rbm_daydream(500,weights_own)[500,])
p9 <- plot_weights(rbm_daydream(500,weights_own)[500,])
p10 <- plot_weights(rbm_daydream(500,weights_own)[500,])
p11 <- plot_weights(rbm_daydream(500,weights_own)[500,])
p12 <- plot_weights(rbm_daydream(500,weights_own)[500,])
multiplot(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,cols=3)
}
plot_samples(weights_own)
plot_samples(weights_own)
plot_samples(weights_deepnet)
plot_samples(weights_blog)
plot_samples(weights_blog)
plot_samples(weights_blog)
plot_samples(weights_own)
plot_samples(weights_own)
plot_samples(weights_own)
plot_samples(weights_own)
plot_samples(weights_own)
TPR <- 1/65
PPV <- 1/57
2*((PPV*TPR)/(PPV+TPR))
data(iris)
pc <- pc(iris[,1:4])
pc <- prcomp(iris[,1:4])
pc
pc$x
iris
pc$x
pc$sdev
pc$rotation
pc$center
pc$scale
data(iris)
pc_real <- prcomp(iris[,1:4])
pc_real
pc_real <- prcomp(iris[,1:4])$x
colmeans <- colMeans(iris[,1:4])
mat <- iris[,1:4]
mat
colmeans
colmeans['Sepal.Length']
for (i in names(mat)) mat[[i]] <- mat[[i]] - colmeans[i]
mat
iris[,3]
iris[,3] - colmeans[3]
cov_mat <- cov(mat)
cov_mat
eigens <- eigen(cov_mat)
eigens
t(mat) %*% mat
mat
mat <- as.matrix(mat)
t(mat) %*% mat
cov_mat
eigens
mat
eigens
###############################
# Principal Components Analysis
# Author: Martin Lumiste
# June 9, 2017
###############################
data(iris)
pc_real <- prcomp(iris[,1:4])$x
colmeans <- colMeans(iris[,1:4])
mat <- iris[,1:4]
for (i in names(mat)) mat[[i]] <- mat[[i]] - colmeans[i]
#mat <- as.matrix(mat)
#t(mat) %*% mat
cov_mat <- cov(mat)
eigens <- eigen(cov_mat)
feat_vec = t(eigens$vectors)
row_data_adj = t(mat)
final_data = data.frame(t(feat_vec %*% row_data_adj)) # ?matmult for details
names(final_data) = c('x','y')
plot(final_data, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
final_data
plot(final_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
names(final_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(final_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
final_data
final_data = data.frame(t(feat_vec) %*% mat) # ?matmult for details
feat_vec
mat
dim(mat)
?matmult
feat_vec = t(eigens$vectors)
pca_data = data.frame(t(feat_vec) %*% mat) # ?matmult for details
dim(t(feat_vec))
pca_data = data.frame(t(feat_vec) %*% t(mat)) # ?matmult for details
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
pca_data
pca_data = data.frame(t(feat_vec) %*% t(mat)) # ?matmult for details
pca_data
feat_vec = eigens$vectors
feat_vec
pca_data = data.frame(feat_vec %*% t(mat)) # ?matmult for details
pca_data
pca_data = data.frame(t(feat_vec %*% t(mat))) # ?matmult for details
pca_data
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
feat_vec = t(eigens$vectors)
row_data_adj = t(mat)
pca_data = data.frame(t(feat_vec %*% row_data_adj)) # ?matmult for details
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
feat_vec = t(eigens$vectors)
pca_data = data.frame(t(feat_vec %*% t(mat))) # ?matmult for details
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
feat_vec = t(eigens$vectors)
pca_data = data.frame(t(feat_vec %*% t(mat))) # ?matmult for details
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
feat_vec = eigens$vectors
pca_data = data.frame(t(feat_vec %*% t(mat))) # ?matmult for details
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
feat_vec = t(eigens$vectors)
pca_data = data.frame(t(feat_vec %*% t(mat))) # ?matmult for details
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
eigens
plot(pca_data$PCA3, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
plot(pca_data$PCA3, final_data$PCA4, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
plot(pca_data$PCA1, final_data$PCA4, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
mat
t(mat)
my_mat <- as.matrix(mat)
(1/149) * t(my_mat) %*% my_mat
cov_mat
my_mat <- as.matrix(mat)
(1/nrow(mat)-1) * t(my_mat) %*% my_mat
(1/(nrow(mat)-1)) * t(my_mat) %*% my_mat
cov_mat
###############################
# Principal Components Analysis
# Author: Martin Lumiste
# June 9, 2017
###############################
data(iris)
pc_real <- prcomp(iris[,1:4])$x
colmeans <- colMeans(iris[,1:4])
# Data matrix
mat <- iris[,1:4]
# Deameaning
for (i in names(mat)) mat[[i]] <- mat[[i]] - colmeans[i]
# Covariance matrix calculation
my_mat <- as.matrix(mat)
cov_mat <- (1/(nrow(mat)-1)) * t(my_mat) %*% my_mat
# Eigenvalues of covariance matrix
eigens <- eigen(cov_mat)
feat_vec = t(eigens$vectors)
#row_data_adj = t(mat)
# PCA construction
pca_data = data.frame(t(feat_vec %*% t(mat))) # ?matmult for details
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
PCA1
pca_data
iris
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16, col=iris$Species)
plot(pca_data$PCA1, final_data$PCA3, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16, col=iris$Species)
plot(pca_data$PCA1, final_data$PCA4, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16, col=iris$Species)
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16, col=iris$Species)
feat_vec
dim(feat_vec)
feat_vec = eigens$vectors
pca_data = data.frame(t(feat_vec %*% t(mat))) # ?matmult for details
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16, col=iris$Species)
feat_vec = t(eigens$vectors)
pca_data = data.frame(t(feat_vec %*% t(mat))) # ?matmult for details
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16, col=iris$Species)
feat_vec = eigens$vectors
pca_data = data.frame(t(feat_vec %*% t(mat))) # ?matmult for details
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16, col=iris$Species)
feat_vec = t(eigens$vectors)
pca_data = data.frame(t(feat_vec %*% t(mat))) # ?matmult for details
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16, col=iris$Species)
feat_vec
pca_data = data.frame(mat %*% t(feat_vec))
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
dim(feat_vec)
dim(mat)
pca_data = data.frame(mat %*% feat_vec)
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
mat
dim(mat)
dim(feat_vec)
mat %*% feat_vec
as.matrix(mat) %*% feat_vec
pca_data = data.frame(my_mat %*% feat_vec)
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16, col=iris$Species)
feat_vec = eigens$vectors
pca_data = data.frame(my_mat %*% feat_vec)
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16, col=iris$Species)
eigens <- eigen(cov_mat)$vectors
pca_data = data.frame(my_mat %*% eigens)
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16, col=iris$Species)
data(austres)
plot(austres, type="l")
(169.3 - 152) + (182.95 - 176) + (93.5 - 104)
((169.3 - 152) + (182.95 - 176) + (93.5 - 104)) / 8
((169.3 - 152) + (182.95 - 176) + (93.5 - 104) + 14) / 8
library(rjson)
colnames <- c("timestamp","sys_time","name","wmocode","phenomenon","visibility","precipitations","airpressure",
"relativehumidity","airtemperature","winddirection","windspeed","windspeedmax")
data <- tail(read.table("../DB_XML.csv",sep=","),1)
names(data) <- colnames
setwd("to_commit")
library(rjson)
colnames <- c("timestamp","sys_time","name","wmocode","phenomenon","visibility","precipitations","airpressure",
"relativehumidity","airtemperature","winddirection","windspeed","windspeedmax")
data <- tail(read.table("../DB_XML.csv",sep=","),1)
names(data) <- colnames
getwd)
getwd()
setwd("C:\\Users\\martin\\Desktop\\Weather\\to_commit")
library(rjson)
colnames <- c("timestamp","sys_time","name","wmocode","phenomenon","visibility","precipitations","airpressure",
"relativehumidity","airtemperature","winddirection","windspeed","windspeedmax")
data <- tail(read.table("../DB_XML.csv",sep=","),1)
names(data) <- colnames
string <- toJSON(data)
string
?gsub
gsub("\","a",string)
gsub("\\","a",string)
gsub("\\\\","a",string)
gsub("\\\","a",string)
gsub("","a",string)
gsub("\\\","a",string)
gsub("\\","a",string)
gsub("\","a",string)
gsub("\\","a",string)
gsub("\\","a","\\")
gsub("\\\\","a","\\")
gsub("\\\\","a",string)
string
gsub("":","a",string)
gsub("\":","a",string)
gsub("\":","",string)
gsub("\":",":",string)
gsub("\\":",":",string)
gsub("\\":",":",string)
gsub("\":",":",string)
string
gsub(":\","a",string)
gsub(":\\","a",string)
gsub(":\\\","a",string)
gsub(":\\\\","a",string)
