ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(p1,p2,p3,p4)
p1 <- plot_weights(weights_blog[1,])
p2 <- plot_weights(weights_blog[2,])
p3 <- plot_weights(weights_blog[3,])
p4 <- plot_weights(weights_blog[4,])
multiplot(p1,p2,p3,p4)
plot_weights <- function(weight_vec){
# Need to rotate the images by 90CW - we can do it by a combination of transpose and rev
wot <- unlist(apply(t(matrix(weight_vec,nrow=28)),2,rev))
colnames(wot) <- 1:28
rownames(wot) <- 1:28
df <- melt(wot)
ggplot(df, aes(x=Var2, y=Var1, fill=value)) + geom_tile() +
coord_equal() + scale_fill_continuous(low="black", high= "white") + labs(x=NULL, y=NULL) +
guides(fill=FALSE) + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
}
p1 <- plot_weights(weights_blog[1,])
p2 <- plot_weights(weights_blog[2,])
p3 <- plot_weights(weights_blog[3,])
p4 <- plot_weights(weights_blog[4,])
multiplot(p1,p2,p3,p4,col=3)
plot_weights <- function(weight_vec){
# Need to rotate the images by 90CW - we can do it by a combination of transpose and rev
wot <- unlist(apply(t(matrix(weight_vec,nrow=28)),2,rev))
colnames(wot) <- 1:28
rownames(wot) <- 1:28
df <- melt(wot)
ggplot(df, aes(x=Var2, y=Var1, fill=value)) + geom_tile() +
coord_equal() + scale_fill_continuous(low="black", high= "white") + labs(x=NULL, y=NULL) +
guides(fill=FALSE) + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
}
p1 <- plot_weights(weights_blog[1,])
p2 <- plot_weights(weights_blog[2,])
p3 <- plot_weights(weights_blog[3,])
p4 <- plot_weights(weights_blog[4,])
multiplot(p1,p2,p3,p4,col=3)
p1 <- plot_weights(weights_blog[1,])
p2 <- plot_weights(weights_blog[2,])
p3 <- plot_weights(weights_blog[3,])
p4 <- plot_weights(weights_blog[4,])
multiplot(p1,p2,p3,p4,col=3)
multiplot(p1,p2,p3,p4,col=2)
multiplot(p1,p2,p3,p4,cols=2)
big_plot <- function(weight_object){
p1 <- plot_weights(weights_object[1,])
p2 <- plot_weights(weights_object[2,])
p3 <- plot_weights(weights_object[3,])
p4 <- plot_weights(weights_object[4,])
p5 <- plot_weights(weights_object[5,])
p6 <- plot_weights(weights_object[6,])
p7 <- plot_weights(weights_object[7,])
p8 <- plot_weights(weights_object[8,])
p9 <- plot_weights(weights_object[9,])
p10 <- plot_weights(weights_object[10,])
p11 <- plot_weights(weights_object[11,])
p12 <- plot_weights(weights_object[12,])
multiplot(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,cols=3)
}
big_lot(weights_blog)
big_plot(weights_blog)
big_plot <- function(weights_object){
p1 <- plot_weights(weights_object[1,])
p2 <- plot_weights(weights_object[2,])
p3 <- plot_weights(weights_object[3,])
p4 <- plot_weights(weights_object[4,])
p5 <- plot_weights(weights_object[5,])
p6 <- plot_weights(weights_object[6,])
p7 <- plot_weights(weights_object[7,])
p8 <- plot_weights(weights_object[8,])
p9 <- plot_weights(weights_object[9,])
p10 <- plot_weights(weights_object[10,])
p11 <- plot_weights(weights_object[11,])
p12 <- plot_weights(weights_object[12,])
multiplot(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,cols=3)
}
big_plot(weights_blog)
big_plot(weights_own)
big_plot(weights_deepnet)
big_plot(weights_own)
dim(weights_own)
rbm_daydream(500,weights_own)
plot_weights(rbm_daydream(500,weights_own)[500,])
plot_weights(rbm_daydream(500,weights_own)[500,])
p1 <- plot_weights(rbm_daydream(500,weights_own)[500,])
plot_samples <- function(W){
p1 <- plot_weights(rbm_daydream(500,weights_own)[500,])
p2 <- plot_weights(rbm_daydream(500,weights_own)[500,])
p3 <- plot_weights(rbm_daydream(500,weights_own)[500,])
p4 <- plot_weights(rbm_daydream(500,weights_own)[500,])
p5 <- plot_weights(rbm_daydream(500,weights_own)[500,])
p6 <- plot_weights(rbm_daydream(500,weights_own)[500,])
p7 <- plot_weights(rbm_daydream(500,weights_own)[500,])
p8 <- plot_weights(rbm_daydream(500,weights_own)[500,])
p9 <- plot_weights(rbm_daydream(500,weights_own)[500,])
p10 <- plot_weights(rbm_daydream(500,weights_own)[500,])
p11 <- plot_weights(rbm_daydream(500,weights_own)[500,])
p12 <- plot_weights(rbm_daydream(500,weights_own)[500,])
multiplot(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,cols=3)
}
plot_samples(weights_own)
plot_samples(weights_own)
plot_samples(weights_deepnet)
plot_samples(weights_blog)
plot_samples(weights_blog)
plot_samples(weights_blog)
plot_samples(weights_own)
plot_samples(weights_own)
plot_samples(weights_own)
plot_samples(weights_own)
plot_samples(weights_own)
TPR <- 1/65
PPV <- 1/57
2*((PPV*TPR)/(PPV+TPR))
data(iris)
pc <- pc(iris[,1:4])
pc <- prcomp(iris[,1:4])
pc
pc$x
iris
pc$x
pc$sdev
pc$rotation
pc$center
pc$scale
data(iris)
pc_real <- prcomp(iris[,1:4])
pc_real
pc_real <- prcomp(iris[,1:4])$x
colmeans <- colMeans(iris[,1:4])
mat <- iris[,1:4]
mat
colmeans
colmeans['Sepal.Length']
for (i in names(mat)) mat[[i]] <- mat[[i]] - colmeans[i]
mat
iris[,3]
iris[,3] - colmeans[3]
cov_mat <- cov(mat)
cov_mat
eigens <- eigen(cov_mat)
eigens
t(mat) %*% mat
mat
mat <- as.matrix(mat)
t(mat) %*% mat
cov_mat
eigens
mat
eigens
###############################
# Principal Components Analysis
# Author: Martin Lumiste
# June 9, 2017
###############################
data(iris)
pc_real <- prcomp(iris[,1:4])$x
colmeans <- colMeans(iris[,1:4])
mat <- iris[,1:4]
for (i in names(mat)) mat[[i]] <- mat[[i]] - colmeans[i]
#mat <- as.matrix(mat)
#t(mat) %*% mat
cov_mat <- cov(mat)
eigens <- eigen(cov_mat)
feat_vec = t(eigens$vectors)
row_data_adj = t(mat)
final_data = data.frame(t(feat_vec %*% row_data_adj)) # ?matmult for details
names(final_data) = c('x','y')
plot(final_data, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
final_data
plot(final_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
names(final_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(final_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
final_data
final_data = data.frame(t(feat_vec) %*% mat) # ?matmult for details
feat_vec
mat
dim(mat)
?matmult
feat_vec = t(eigens$vectors)
pca_data = data.frame(t(feat_vec) %*% mat) # ?matmult for details
dim(t(feat_vec))
pca_data = data.frame(t(feat_vec) %*% t(mat)) # ?matmult for details
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
pca_data
pca_data = data.frame(t(feat_vec) %*% t(mat)) # ?matmult for details
pca_data
feat_vec = eigens$vectors
feat_vec
pca_data = data.frame(feat_vec %*% t(mat)) # ?matmult for details
pca_data
pca_data = data.frame(t(feat_vec %*% t(mat))) # ?matmult for details
pca_data
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
feat_vec = t(eigens$vectors)
row_data_adj = t(mat)
pca_data = data.frame(t(feat_vec %*% row_data_adj)) # ?matmult for details
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
feat_vec = t(eigens$vectors)
pca_data = data.frame(t(feat_vec %*% t(mat))) # ?matmult for details
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
feat_vec = t(eigens$vectors)
pca_data = data.frame(t(feat_vec %*% t(mat))) # ?matmult for details
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
feat_vec = eigens$vectors
pca_data = data.frame(t(feat_vec %*% t(mat))) # ?matmult for details
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
feat_vec = t(eigens$vectors)
pca_data = data.frame(t(feat_vec %*% t(mat))) # ?matmult for details
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
eigens
plot(pca_data$PCA3, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
plot(pca_data$PCA3, final_data$PCA4, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
plot(pca_data$PCA1, final_data$PCA4, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
mat
t(mat)
my_mat <- as.matrix(mat)
(1/149) * t(my_mat) %*% my_mat
cov_mat
my_mat <- as.matrix(mat)
(1/nrow(mat)-1) * t(my_mat) %*% my_mat
(1/(nrow(mat)-1)) * t(my_mat) %*% my_mat
cov_mat
###############################
# Principal Components Analysis
# Author: Martin Lumiste
# June 9, 2017
###############################
data(iris)
pc_real <- prcomp(iris[,1:4])$x
colmeans <- colMeans(iris[,1:4])
# Data matrix
mat <- iris[,1:4]
# Deameaning
for (i in names(mat)) mat[[i]] <- mat[[i]] - colmeans[i]
# Covariance matrix calculation
my_mat <- as.matrix(mat)
cov_mat <- (1/(nrow(mat)-1)) * t(my_mat) %*% my_mat
# Eigenvalues of covariance matrix
eigens <- eigen(cov_mat)
feat_vec = t(eigens$vectors)
#row_data_adj = t(mat)
# PCA construction
pca_data = data.frame(t(feat_vec %*% t(mat))) # ?matmult for details
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16)
PCA1
pca_data
iris
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16, col=iris$Species)
plot(pca_data$PCA1, final_data$PCA3, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16, col=iris$Species)
plot(pca_data$PCA1, final_data$PCA4, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16, col=iris$Species)
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16, col=iris$Species)
feat_vec
dim(feat_vec)
feat_vec = eigens$vectors
pca_data = data.frame(t(feat_vec %*% t(mat))) # ?matmult for details
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16, col=iris$Species)
feat_vec = t(eigens$vectors)
pca_data = data.frame(t(feat_vec %*% t(mat))) # ?matmult for details
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16, col=iris$Species)
feat_vec = eigens$vectors
pca_data = data.frame(t(feat_vec %*% t(mat))) # ?matmult for details
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16, col=iris$Species)
feat_vec = t(eigens$vectors)
pca_data = data.frame(t(feat_vec %*% t(mat))) # ?matmult for details
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16, col=iris$Species)
feat_vec
pca_data = data.frame(mat %*% t(feat_vec))
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
dim(feat_vec)
dim(mat)
pca_data = data.frame(mat %*% feat_vec)
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
mat
dim(mat)
dim(feat_vec)
mat %*% feat_vec
as.matrix(mat) %*% feat_vec
pca_data = data.frame(my_mat %*% feat_vec)
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16, col=iris$Species)
feat_vec = eigens$vectors
pca_data = data.frame(my_mat %*% feat_vec)
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16, col=iris$Species)
eigens <- eigen(cov_mat)$vectors
pca_data = data.frame(my_mat %*% eigens)
names(pca_data) = c('PCA1','PCA2','PCA3','PCA4')
plot(pca_data$PCA1, final_data$PCA2, asp=T, xlab='PCA 1', ylab='PCA 2', pch=16, col=iris$Species)
data(austres)
plot(austres, type="l")
(169.3 - 152) + (182.95 - 176) + (93.5 - 104)
((169.3 - 152) + (182.95 - 176) + (93.5 - 104)) / 8
((169.3 - 152) + (182.95 - 176) + (93.5 - 104) + 14) / 8
setwd("to_commit")
setwd("C:/Users/martin/Desktop/Weather")
setwd("to_commit")
colnames <- c("timestamp","sys_time","name","wmocode","lon","lat","phenomenon","visibility","precipitations","airpressure",
"relativehumidity","airtemperature","winddirection","windspeed","windspeedmax")
sun_names <- c("Clear","Few clouds","Variable clouds")
print(paste("Updating Github page",Sys.time()))
data <- tail(read.table("../DB_XML.csv",sep=","),1)
names(data) <- colnames
header <- paste("# Weather in Tallinn", "\n")
if (data$phenomenon %in% sun_names){
icon <- paste("<img src=","'images/sun.jpg'","width= '50' /> \n")
} else {
icon <- paste("<img src=","'images/cloud.png'","width= '50' /> \n")
}
string1 <- paste("## Current conditions:", "\n")
string2 <- paste("### Harku: \n")
string22 <- paste("Timestamp:","```",data$sys_time,"```", "\n")
string3 <- paste("Condition:","```",data$phenomenon,"```","\n")
string4 <- paste("Visibility:","```",data$visibility,"```","\n")
string5 <- paste("Precipitation:","```",data$precipitation,"```","\n")
string6 <- paste("Pressure:","```", data$airpressure,"```", "\n")
string7 <- paste("Humidity:","```",data$relativehumidity,"```","\n")
string8 <- paste("Temperature:","```",data$airtemperature,"```","\n")
string9 <- paste("Wind speed:","```", data$windspeed,"```", "\n")
string10 <- paste("Wind direction:","```",data$winddirection,"```","\n")
string11 <- paste("Max wind speed:","```", data$windspeedmax,"```","\n")
condition_string <- c(header,icon,string1,string2,string22,string3,string4,string5,string6,string7,string8,string9,string10,string11)
data_forecast <- read.table("../DB_FYRXML.csv",sep=",",header=TRUE)
data_forecast$time <- as.POSIXct(data_forecast$time)
data_forecast <- data_forecast[as.Date(data_forecast$time,tz="EET") == today(),]
library(lubridate)
data_forecast <- data_forecast[as.Date(data_forecast$time,tz="EET") == today(),]
data_forecast <- data.frame(data_forecast,error_temp=NA)
data_forecast
errors <- read.table("../DB_EXML.csv",sep=",",header=TRUE)
errors$time <- as.POSIXct(errors$time)
errors
errors <- errors[as.Date(errors$time,tz="EET") == today(),c(2,7)]
errors
errors <- read.table("../DB_EXML.csv",sep=",",header=TRUE)
errors
errors$time <- as.POSIXct(errors$time)
errors
errors <- read.table("../DB_EXML.csv",sep=",",header=TRUE)
errors$time <- as.POSIXct(errors$time,format="%Y-%m-%d %H:%M:%S")
errors
errors <- errors[as.Date(errors$time,tz="EET") == today(),c(2,7)]
errors
for (i in 1:nrow(errors)){
data_forecast[data_forecast$time == errors[i,"time"],"error_temp"] <- errors[i,"error_temp"]
}
errors$time
errors <- errors[!is.na(errors$time),]
errors
for (i in 1:nrow(errors)){
data_forecast[data_forecast$time == errors[i,"time"],"error_temp"] <- errors[i,"error_temp"]
}
data_forecast
errors
data_forecast <- read.table("../DB_FYRXML.csv",sep=",",header=TRUE)
data_forecast$time <- as.POSIXct(data_forecast$time)
data_forecast <- data_forecast[as.Date(data_forecast$time,tz="EET") == today() & data_forecast$time > Sys.time() - 3600*12,]
data_forecast <- data.frame(data_forecast,error_temp=NA)
data_forecast
Sys.time() - 3600*12
data_forecast[as.Date(data_forecast$time,tz="EET") == today() & data_forecast$time > Sys.time() - 3600*12,]
data_forecast[as.Date(data_forecast$time,tz="EET") == today() && data_forecast$time > Sys.time() - 3600*12,]
data_forecast[data_forecast$time > Sys.time() - 3600*12,]
data_forecast <- data_forecast[as.Date(data_forecast$time,tz="EET") == today() & data_forecast$forecast_time > Sys.time() - 3600*12,]
data_forecast <- data_forecast[as.Date(data_forecast$time,tz="EET") == today() & as.POSIXct(data_forecast$forecast_time) > Sys.time() - 3600*12,]
data_forecast
data_forecast <- read.table("../DB_FYRXML.csv",sep=",",header=TRUE)
data_forecast$time <- as.POSIXct(data_forecast$time)
data_forecast$forecast_time <- as.POSIXct(data_forecast$forecast_time)
data_forecast[as.Date(data_forecast$time,tz="EET") == today() & data_forecast$forecast_time > Sys.time() - 3600*12,]
data_forecast <- data_forecast[as.Date(data_forecast$time,tz="EET") == today() & data_forecast$forecast_time > Sys.time() - 3600*12,]
data_forecast <- data.frame(data_forecast,error_temp=NA)
errors <- read.table("../DB_EXML.csv",sep=",",header=TRUE)
errors$time <- as.POSIXct(errors$time,format="%Y-%m-%d %H:%M:%S")
errors <- errors[as.Date(errors$time,tz="EET") == today(),c(2,7)]
errors <- errors[!is.na(errors$time),]
for (i in 1:nrow(errors)){
data_forecast[data_forecast$time == errors[i,"time"],"error_temp"] <- errors[i,"error_temp"]
}
data_forecast
errors
errors <- read.table("../DB_EXML.csv",sep=",",header=TRUE)
errors$time <- as.POSIXct(errors$time,format="%Y-%m-%d %H:%M:%S")
errors
errors <- read.table("../DB_EXML.csv",sep=",",header=TRUE)
errors$time <- as.POSIXct(errors$time,format="%Y-%m-%d %H:%M:%S")
errors <- errors[as.Date(errors$time,tz="EET") == today(),c(2,7)]
errors
errors <- errors[!is.na(errors$time),]
errors
errors[1,"time"]
errors <- read.table("../DB_EXML.csv",sep=",",header=TRUE)
errors$time <- as.POSIXct(errors$time,format="%Y-%m-%d %H:%M:%S")
errors
library(knitr)
library(lubridate)
setwd("to_commit")
getwd)
getwd()
colnames <- c("timestamp","sys_time","name","wmocode","lon","lat","phenomenon","visibility","precipitations","airpressure",
"relativehumidity","airtemperature","winddirection","windspeed","windspeedmax")
sun_names <- c("Clear","Few clouds","Variable clouds")
print(paste("Updating Github page",Sys.time()))
data <- tail(read.table("../DB_XML.csv",sep=","),1)
names(data) <- colnames
header <- paste("# Weather in Tallinn", "\n")
if (data$phenomenon %in% sun_names){
icon <- paste("<img src=","'images/sun.jpg'","width= '50' /> \n")
} else {
icon <- paste("<img src=","'images/cloud.png'","width= '50' /> \n")
}
string1 <- paste("## Current conditions:", "\n")
string2 <- paste("### Harku: \n")
string22 <- paste("Timestamp:","```",data$sys_time,"```", "\n")
string3 <- paste("Condition:","```",data$phenomenon,"```","\n")
string4 <- paste("Visibility:","```",data$visibility,"```","\n")
string5 <- paste("Precipitation:","```",data$precipitation,"```","\n")
string6 <- paste("Pressure:","```", data$airpressure,"```", "\n")
string7 <- paste("Humidity:","```",data$relativehumidity,"```","\n")
string8 <- paste("Temperature:","```",data$airtemperature,"```","\n")
string9 <- paste("Wind speed:","```", data$windspeed,"```", "\n")
string10 <- paste("Wind direction:","```",data$winddirection,"```","\n")
string11 <- paste("Max wind speed:","```", data$windspeedmax,"```","\n")
condition_string <- c(header,icon,string1,string2,string22,string3,string4,string5,string6,string7,string8,string9,string10,string11)
data_forecast <- read.table("../DB_FYRXML.csv",sep=",",header=TRUE)
data_forecast$time <- as.POSIXct(data_forecast$time)
data_forecast$forecast_time <- as.POSIXct(data_forecast$forecast_time)
data_forecast <- data_forecast[as.Date(data_forecast$time,tz="EET") == today() & data_forecast$forecast_time > Sys.time() - 3600*12,]
data_forecast <- data.frame(data_forecast,error_temp=NA)
errors <- read.table("../DB_EXML.csv",sep=",",header=TRUE)
errors$time <- as.POSIXct(errors$time,format="%Y-%m-%d %H:%M:%S")
errors <- errors[as.Date(errors$time,tz="EET") == today(),c(2,7)]
errors <- errors[!is.na(errors$time),]
for (i in 1:nrow(errors)){
data_forecast[data_forecast$time == errors[i,"time"],"error_temp"] <- errors[i,"error_temp"]
}
line <- paste("\n Today's forecast from Yr.no is: \n")
table <- kable(data_forecast)
table
string <- c(condition_string,line,table)
write(string, file="README.MD")
system("git add .")
system("git commit -m 'update'")
system("git push -u origin master")
data_forecast <- read.table("../DB_FYRXML.csv",sep=",",header=TRUE)
data_forecast
data <- tail(read.table("../DB_XML.csv",sep=","),1)
data
data <- read.table("../DB_XML.csv",sep=",")
data <- read.table("../DB_XML.csv",sep=",")
data
data <- read.table("../DB_XML.csv",sep=",",header=T)
data$airtemperature
data
data[,lead_temp := shift("airtemperature",1L,type="lead")]
library(data.table)
data[,lead_temp := shift("airtemperature",1L,type="lead")]
data <- fread("../DB_XML.csv",sep=",",header=T)
data
data[,lead_temp := shift("airtemperature",1L,type="lead")]
data
data$lead_temp
data[,lead_temp := shift(airtemperature,1L,type="lead")]
data
plot(data$sys_time,data$airtemperature)
data$sys_time
data$airtemperature
length(data$airtemperature)
length(data$sys_time)
plot(data$sys_time,data$airtemperature)
str(data)
data$sys_time <- as.POSIXct(data$sys_time)
str(data)
plot(data$sys_time,data$airtemperature)
plot(data$sys_time,data$airtemperature,type="l")
data
